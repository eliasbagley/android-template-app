def displayName = "Template App"

// Manifest version information!
def versionMajor = 1
def versionMinor = 0
def versionPatch = 1
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

def version_code = versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
def version_name = "${versionMajor}.${versionMinor}.${versionPatch}"

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        classpath 'me.tatarka:gradle-retrolambda:3.2.3'
        classpath 'me.tatarka.retrolambda.projectlombok:lombok.ast:0.2.3.a2'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    maven { url "https://clojars.org/repo/" }
}

apply plugin: 'hugo'

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone("UTC"))

def isCi = "true".equals(System.getenv("CI"))

def releaseNotes = 'git log --pretty=format:"%s" --since "yesterday"'.execute([], project.rootDir).text.trim()

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.rocketmade.templateapp"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        minSdkVersion 16
        targetSdkVersion 22
        versionCode version_code
        versionName version_name

    }
    signingConfigs {
        release {
            storeFile file("../keystores/changeme.jks")
            keyAlias "changeme"
            storePassword "Rocketmade"
            keyPassword "Rocketmade"
        }
    }
    buildTypes {
        release {
            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "string", "display_app_name", displayName
            signingConfig signingConfigs.release
            buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
            buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
        }
        debug {
            debuggable true
            minifyEnabled false
            applicationIdSuffix ".dbg"
            versionNameSuffix " Dbg"
            resValue "string", "display_app_name", displayName + " Dbg"
            buildConfigField "String", "GIT_SHA", "\"DEBUG\""
            buildConfigField "String", "BUILD_TIME", "\"DEBUG\""
        }
        staging {
            debuggable false
            minifyEnabled false
            applicationIdSuffix ".stg"
            versionNameSuffix " Stg"
            resValue "string", "display_app_name", displayName + " Stg"
            signingConfig signingConfigs.release
            ext.betaDistributionReleaseNotes=releaseNotes
            ext.betaDistributionGroupAliases="CHANGEME"
            buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
            buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
        }
    }

    dexOptions {
        dexInProcess = true
        incremental !isCi
        preDexLibraries = false
        javaMaxHeapSize "4G"
        threadCount 4
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        // Fix a bug with duplicate includes with guava
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
    }

    lintOptions {
        textReport true
        textOutput 'stdout'
//        fatal 'UnusedResources'
    }
}


// These version codes are extracted to make it easy to update multiple dependencies
// that are tied to the same versions
ext {
    supportLibVersion = '23.0.1'
    espressoVersion = '2.2.1'
    playServicesVersion = '8.3.0'
    retrofitVersion = '2.0.0-beta2'
    leakCanaryVersion = '1.3.1'
    sqlbriteVersion = '0.4.1'
    rxjavaVersion = '1.1.0'
    stethoVersion = '1.2.0'
    androidTestVersion = '0.4.1'
}



dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    apt 'com.squareup.dagger:dagger-compiler:1.2.2'

    compile "com.android.support:appcompat-v7:${supportLibVersion}"
    compile "com.android.support:design:${supportLibVersion}"
    compile "com.android.support:support-annotations:${supportLibVersion}"
    compile "com.android.support:support-v4:${supportLibVersion}"

    compile 'com.f2prateek.rx.preferences:rx-preferences:1.0.0'

    compile "com.facebook.stetho:stetho-okhttp:${stethoVersion}"
    compile "com.facebook.stetho:stetho:${stethoVersion}"

    compile "com.google.android.gms:play-services-base:${playServicesVersion}"
    compile "com.google.android.gms:play-services-gcm:${playServicesVersion}"
    compile "com.google.android.gms:play-services-ads:${playServicesVersion}"
    compile 'com.google.code.gson:gson:2.6.1'

    compile 'com.jakewharton.byteunits:byteunits:0.9.1'
    compile 'com.jakewharton.rxbinding:rxbinding:0.2.0'
    compile 'com.jakewharton.threetenabp:threetenabp:1.0.2'
    compile 'com.jakewharton.timber:timber:4.0.1'
    compile 'com.jakewharton:butterknife:7.0.1'

    compile 'com.joanzapata.iconify:android-iconify-fontawesome:2.1.0'

    compile 'com.squareup.dagger:dagger:1.2.2'
    compile 'com.squareup.okhttp:okhttp:2.6.0'
    compile 'com.squareup.okhttp:logging-interceptor:2.6.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.squareup:otto:1.3.8'
    compile "com.squareup.retrofit:retrofit:${retrofitVersion}"
    compile "com.squareup.retrofit:converter-gson:${retrofitVersion}"
    compile "com.squareup.retrofit:adapter-rxjava:${retrofitVersion}"
    debugCompile "com.squareup.retrofit:retrofit-mock:${retrofitVersion}"
    debugCompile "com.squareup.retrofit:adapter-rxjava-mock:${retrofitVersion}"

    compile "io.reactivex:rxandroid:${rxjavaVersion}"
    compile "io.reactivex:rxjava:${rxjavaVersion}"

    debugCompile 'com.jakewharton.madge:madge:1.1.2'
    debugCompile 'com.jakewharton.scalpel:scalpel:1.1.2'
    debugCompile 'com.jakewharton:process-phoenix:1.0.2'

    debugCompile 'com.mattprecious.telescope:telescope:1.5.0@aar'

    debugCompile "com.squareup.leakcanary:leakcanary-android:${leakCanaryVersion}"
    stagingCompile "com.squareup.leakcanary:leakcanary-android-no-op:${leakCanaryVersion}"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:${leakCanaryVersion}"

    provided 'com.squareup.dagger:dagger-compiler:1.2.2'

    provided 'org.projectlombok:lombok:1.16.6'

    compile 'com.makeramen:roundedimageview:2.2.1'

    compile('com.crashlytics.sdk.android:crashlytics:2.2.4@aar') {
        transitive = true;
    }

    compile 'se.emilsjolander:stickylistheaders:2.7.0'

    compile 'com.astuetz:pagerslidingtabstrip:1.0.1'

    compile "com.hannesdorfmann.sqlbrite:dao:${sqlbriteVersion}"
    compile "com.hannesdorfmann.sqlbrite:annotations:${sqlbriteVersion}"
    apt "com.hannesdorfmann.sqlbrite:object-mapper:${sqlbriteVersion}"

    compile 'uk.co.chrisjenx:calligraphy:2.1.0'

    compile 'com.github.brianPlummer:tinydancer:0.0.9'

    compile 'frankiesardo:icepick:3.1.0'
    apt 'frankiesardo:icepick-processor:3.1.0'

    compile "org.parceler:parceler-api:1.0.4"
    apt "org.parceler:parceler:1.0.4"

    debugCompile 'com.github.promeg:xlog-compiler:2.1.1'
    debugCompile 'com.github.promeg:xlog-android:2.1.1'
    stagingCompile 'com.github.promeg:xlog-android-idle:2.1.1'
    releaseCompile 'com.github.promeg:xlog-android-idle:2.1.1'

    // Testing dependencies

    androidTestCompile "com.android.support.test.espresso:espresso-contrib:${espressoVersion}"
    androidTestCompile "com.android.support.test.espresso:espresso-core:${espressoVersion}"
    androidTestCompile "com.android.support.test:rules:${androidTestVersion}"
    androidTestCompile "com.android.support.test:runner:${androidTestVersion}"
    androidTestCompile "com.android.support:support-annotations:${supportLibVersion}"
    androidTestCompile "com.google.dexmaker:dexmaker-mockito:1.2"
    androidTestCompile "com.google.dexmaker:dexmaker:1.2"
    androidTestCompile "com.squareup.spoon:spoon-client:1.2.0"
    androidTestCompile 'com.google.truth:truth:0.28'
    androidTestCompile 'junit:junit:4.12'
    androidTestCompile 'org.mockito:mockito-core:2.0.2-beta'

    testCompile 'com.google.truth:truth:0.28'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.0.2-beta'
}

task('gitTag') {
    "git tag ${version_name}".execute([], project.rootDir)
    "git push --tags".execute([], project.rootDir)
}


// Install all flavors

def installAll = tasks.create('installAll')
installAll.description = 'Install all applications.'
android.applicationVariants.all { variant ->
    installAll.dependsOn(variant.install)
    // Ensure we end up in the same group as the other install tasks.
    installAll.group = variant.install.group
}

// The default 'assemble' task only applies to normal variants. Add test variants as well.
android.testVariants.all { variant ->
    tasks.getByName('assemble').dependsOn variant.assemble
}

// Log the tests in the console rather than having to view the HTML report
tasks.withType(Test) {
    testLogging {
        events "passed", "skipped", "failed"
    }
}
